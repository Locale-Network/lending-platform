generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  // Uses connection pooling
  url       = env("POSTGRES_PRISMA_URL")
  // Uses direct connection, ⚠️ make sure to keep this to `POSTGRES_URL_NON_POOLING`
  // or you'll have dangling databases from migrations
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

// reclaim debt service proof
model DebtServiceProof {
  id String @id @db.VarChar(255)

  debtServiceId String      @unique @map("debt_service_id")
  debtService   DebtService @relation(fields: [debtServiceId], references: [id], onDelete: Cascade)

  proof   Json
  context Json

  createdAt DateTime @default(now()) @map("created_at")

  @@map("debt_service_proofs")
}

// reclaim credit score proof
model CreditScoreProof {
  id String @id @db.VarChar(255)

  creditScoreId String      @unique @map("credit_score_id")
  creditScore   CreditScore @relation(fields: [creditScoreId], references: [id], onDelete: Cascade)

  proof   Json
  context Json

  createdAt DateTime @default(now()) @map("created_at")

  @@map("credit_score_proofs")
}

// https://plaid.com/docs/api/products/transactions/
model Transaction {
  id            Int       @id @default(autoincrement())
  transactionId String?   @map("transaction_id") @db.VarChar(255)
  accountId     String?   @map("account_id") @db.VarChar(255)
  amount        Float?
  currency      String?   @db.VarChar(255)
  merchant      String?   @db.VarChar(255)
  merchantId    String?   @map("merchant_id") @db.VarChar(255)
  date          DateTime? @default(now())
  isDeleted     Boolean   @default(false) @map("is_deleted")

  @@map("transactions")
}

// https://plaid.com/docs/api/products/identity-verification/#identity_verificationget
enum KYCVerificationStatus {
  active
  success
  failed
  expired
  canceled
  pending_review
}

// chain account identity verification with PLAID
// https://plaid.com/docs/api/products/identity-verification/
model KYCVerification {
  identityVerificationId String @id @map("identity_verification_id") @db.VarChar(255)

  accountAddress String  @unique @map("account_address") @db.VarChar(255)
  account        Account @relation(fields: [accountAddress], references: [address], onDelete: Cascade)

  status    KYCVerificationStatus @default(active)
  createdAt DateTime              @default(now()) @map("created_at")
  updatedAt DateTime              @updatedAt @map("updated_at")
  attempts  Int                   @default(1)

  @@index([accountAddress])
  @@map("kyc_verifications")
}

enum Role {
  BORROWER
  APPROVER
  ADMIN
}

// accounts from the Arbitrum chain
model Account {
  address              String                 @id @db.VarChar(255)
  role                 Role                   @default(BORROWER)
  createdAt            DateTime               @default(now()) @map("created_at")
  updatedAt            DateTime               @updatedAt @map("updated_at")
  KYCVerification      KYCVerification?
  plaidItemAccessToken PlaidItemAccessToken[]
  loanApplications     LoanApplication[]

  @@map("accounts")
}

// plaid items authorised by chain account
model PlaidItemAccessToken {
  id          Int    @id @default(autoincrement())
  accessToken String @map("access_token") @db.VarChar(255)
  itemId      String @map("item_id") @db.VarChar(255)

  // account
  accountAddress String  @map("account_address") @db.VarChar(255)
  account        Account @relation(fields: [accountAddress], references: [address], onDelete: Cascade)

  // loan
  loanApplicationId String          @map("loan_application_id")
  loanApplication   LoanApplication @relation(fields: [loanApplicationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("plaid_item_access_tokens")
}

enum LoanApplicationStatus {
  DRAFT
  PENDING
  ADDITIONAL_INFO_NEEDED
  APPROVED
  REJECTED
}

model LoanApplication {
  id String @id @default(cuid())

  accountAddress String  @map("account_address") @db.VarChar(255)
  account        Account @relation(fields: [accountAddress], references: [address], onDelete: Cascade)

  // business information
  businessLegalName       String  @map("business_legal_name") @db.VarChar(255)
  businessAddress         String  @map("business_address") @db.VarChar(255)
  businessState           String  @map("business_state") @db.VarChar(255)
  businessCity            String  @map("business_city") @db.VarChar(255)
  businessZipCode         String  @map("business_zip_code") @db.VarChar(255)
  ein                     String  @map("ein") @db.VarChar(255)
  businessFoundedYear     Int     @map("business_founded_year")
  businessLegalStructure  String  @map("business_legal_structure") @db.VarChar(255)
  businessWebsite         String? @map("business_website")
  businessPrimaryIndustry String  @map("business_primary_industry") @db.VarChar(255)
  businessDescription     String  @map("business_description") @db.VarChar(255)

  // Credit Score
  creditScore CreditScore[]

  // Debt service
  debtService DebtService[]

  // Plaid access token
  plaidItemAccessToken PlaidItemAccessToken[]

  // Current Loans
  hasOutstandingLoans Boolean           @default(false) @map("has_outstanding_loans")
  outstandingLoans    OutstandingLoan[]

  isSubmitted Boolean               @default(false) @map("is_submitted")
  status      LoanApplicationStatus @default(DRAFT) @map("status")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([accountAddress])
  @@map("loan_applications")
}

model OutstandingLoan {
  id String @id @default(cuid())

  loanApplicationId String          @map("loan_application_id")
  loanApplication   LoanApplication @relation(fields: [loanApplicationId], references: [id], onDelete: Cascade)

  lenderName         String   @map("lender_name") @db.VarChar(255)
  loanType           String   @map("loan_type") @db.VarChar(255)
  outstandingBalance Float    @map("outstanding_balance")
  monthlyPayment     Float    @map("monthly_payment")
  remainingMonths    Int      @map("remaining_months")
  annualInterestRate Float    @map("annual_interest_rate")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  @@index([loanApplicationId])
  @@map("outstanding_loans")
}

// credit score associated with a loan application
// taken from reclaim + credit karma
model CreditScore {
  id String @id @default(cuid())

  loanApplicationId String          @map("loan_application_id")
  loanApplication   LoanApplication @relation(fields: [loanApplicationId], references: [id], onDelete: Cascade)

  creditScoreEquifax    Int @map("credit_score_equifax")
  creditScoreTransUnion Int @map("credit_score_transunion")

  // proof
  creditScoreProof CreditScoreProof?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([loanApplicationId])
  @@map("credit_scores")
}

// https://chatgpt.com/share/675bf5ae-5e28-8006-b322-40a615646d12
// debt service associated with a loan application
model DebtService {
  id String @id @default(cuid())

  loanApplicationId String          @map("loan_application_id")
  loanApplication   LoanApplication @relation(fields: [loanApplicationId], references: [id], onDelete: Cascade)

  transactionCount Int @default(0) @map("transaction_count")

  // proof
  debtServiceProof DebtServiceProof?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([loanApplicationId])
  @@map("debt_services")
}

// Track processed notice indexes
model Notice {
  id        Int      @id
  createdAt DateTime @default(now()) @map("created_at")

  @@map("notices")
}
